// <auto-generated />
using System;
using FootballLeaguesSimulation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FootballLeaguesSimulation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Competition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeagueId = 1,
                            Logo = "https://e7.pngegg.com/pngimages/115/195/png-clipart-graphics-uefa-europa-league-logo-football-football-uefa-europa-league-logo.png",
                            Name = "UEFA CHAMPIONS LEAGUE",
                            SeasonId = 1,
                            StartAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Group");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompetitionId = 1,
                            Name = "Group A"
                        },
                        new
                        {
                            Id = 2,
                            CompetitionId = 1,
                            Name = "Group B"
                        },
                        new
                        {
                            Id = 3,
                            CompetitionId = 1,
                            Name = "Group C"
                        },
                        new
                        {
                            Id = 4,
                            CompetitionId = 1,
                            Name = "Group D"
                        },
                        new
                        {
                            Id = 5,
                            CompetitionId = 1,
                            Name = "Group E"
                        },
                        new
                        {
                            Id = 6,
                            CompetitionId = 1,
                            Name = "Group F"
                        },
                        new
                        {
                            Id = 7,
                            CompetitionId = 1,
                            Name = "Group G"
                        },
                        new
                        {
                            Id = 8,
                            CompetitionId = 1,
                            Name = "Group H"
                        },
                        new
                        {
                            Id = 9,
                            CompetitionId = 1,
                            Name = "Null"
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("League");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Logo = "https://w7.pngwing.com/pngs/145/829/png-transparent-uefa-champions-league-uefa-europa-league-uefa-super-cup-uefa-euro-2016-uefa-euro-2020-croatia-football-federation-blue-emblem-text-thumbnail.png",
                            Name = "EUFA"
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Aggregation1")
                        .HasColumnType("int");

                    b.Property<int>("Aggregation2")
                        .HasColumnType("int");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("GuestTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Leg")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("Score1")
                        .HasColumnType("int");

                    b.Property<int?>("Score1ET")
                        .HasColumnType("int");

                    b.Property<int?>("Score1P")
                        .HasColumnType("int");

                    b.Property<int>("Score2")
                        .HasColumnType("int");

                    b.Property<int?>("Score2ET")
                        .HasColumnType("int");

                    b.Property<int?>("Score2P")
                        .HasColumnType("int");

                    b.Property<int>("Winner")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GuestTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RoundId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompetitionId = 1,
                            Name = "Groups"
                        },
                        new
                        {
                            Id = 2,
                            CompetitionId = 1,
                            Name = "Round of 16"
                        },
                        new
                        {
                            Id = 3,
                            CompetitionId = 1,
                            Name = "Quarter Finals"
                        },
                        new
                        {
                            Id = 4,
                            CompetitionId = 1,
                            Name = "Semi Final"
                        },
                        new
                        {
                            Id = 5,
                            CompetitionId = 1,
                            Name = "Final"
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Season");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "2017/2018"
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GroupId");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 1,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Benfica.png",
                            Name = "Benfica"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 1,
                            Logo = "https://kassiesa.net/uefa/clubs/images/CSKA-Moscow.png",
                            Name = "CSKA Moskva"
                        },
                        new
                        {
                            Id = 3,
                            Code = "MUN",
                            CompetitionId = 1,
                            GroupId = 1,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Manchester-United.png",
                            Name = "Manchester United"
                        },
                        new
                        {
                            Id = 4,
                            Code = "BAS",
                            CompetitionId = 1,
                            GroupId = 1,
                            Logo = "https://kassiesa.net/uefa/clubs/images/FC-Basel.png",
                            Name = "FC Basel 1893"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 2,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Anderlecht.png",
                            Name = "Anderlecht"
                        },
                        new
                        {
                            Id = 6,
                            Code = "CEL",
                            CompetitionId = 1,
                            GroupId = 2,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Celtic.png",
                            Name = "Celtic"
                        },
                        new
                        {
                            Id = 7,
                            Code = "FCB",
                            CompetitionId = 1,
                            GroupId = 2,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Bayern-M%FCnchen.png",
                            Name = "FC Bayern München"
                        },
                        new
                        {
                            Id = 8,
                            Code = "PSG",
                            CompetitionId = 1,
                            GroupId = 2,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Paris-Saint-Germain.png",
                            Name = "Paris SG"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 3,
                            Logo = "https://www.logofootball.net/wp-content/uploads/Qarabag-FK-Logo.png",
                            Name = "Qarabağ FK"
                        },
                        new
                        {
                            Id = 10,
                            Code = "CHE",
                            CompetitionId = 1,
                            GroupId = 3,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Chelsea.png",
                            Name = "Chelsea"
                        },
                        new
                        {
                            Id = 11,
                            Code = "ATL",
                            CompetitionId = 1,
                            GroupId = 3,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Atl%E9tico-Madrid.png",
                            Name = "Atlético Madrid"
                        },
                        new
                        {
                            Id = 12,
                            Code = "ROM",
                            CompetitionId = 1,
                            GroupId = 3,
                            Logo = "https://kassiesa.net/uefa/clubs/images/AS-Roma.png",
                            Name = "AS Roma"
                        },
                        new
                        {
                            Id = 13,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 4,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Sporting-CP-Lisbon.png",
                            Name = "Sporting Lisboa"
                        },
                        new
                        {
                            Id = 14,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 4,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Olympiakos-Piraeus.png",
                            Name = "Olympiakos Piräus"
                        },
                        new
                        {
                            Id = 15,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 4,
                            Logo = "https://kassiesa.net/uefa/clubs/images/FC-Barcelona.png",
                            Name = "Barcelona"
                        },
                        new
                        {
                            Id = 16,
                            Code = "JUV",
                            CompetitionId = 1,
                            GroupId = 4,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Juventus.png",
                            Name = "Juventus"
                        },
                        new
                        {
                            Id = 17,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 5,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Spartak-Moscow.png",
                            Name = "Spartak Moskva"
                        },
                        new
                        {
                            Id = 18,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 5,
                            Logo = "https://kassiesa.net/uefa/clubs/images/NK-Maribor.png",
                            Name = "Maribor"
                        },
                        new
                        {
                            Id = 19,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 5,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Liverpool.png",
                            Name = "Liverpool"
                        },
                        new
                        {
                            Id = 20,
                            Code = "SEV",
                            CompetitionId = 1,
                            GroupId = 5,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Sevilla.png",
                            Name = "Sevilla"
                        },
                        new
                        {
                            Id = 21,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 6,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Feyenoord.png",
                            Name = "Feyenoord"
                        },
                        new
                        {
                            Id = 22,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 6,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Shakhtar-Donetsk.png",
                            Name = "Shakhtar Donetsk"
                        },
                        new
                        {
                            Id = 23,
                            Code = "MCI",
                            CompetitionId = 1,
                            GroupId = 6,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Manchester-City.png",
                            Name = "Manchester City"
                        },
                        new
                        {
                            Id = 24,
                            Code = "NAP",
                            CompetitionId = 1,
                            GroupId = 6,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Napoli.png",
                            Name = "Napoli"
                        },
                        new
                        {
                            Id = 25,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 7,
                            Logo = "https://kassiesa.net/uefa/clubs/images/FC-Porto.png",
                            Name = "Porto"
                        },
                        new
                        {
                            Id = 26,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 7,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Besiktas.png",
                            Name = "Beşiktaş JK"
                        },
                        new
                        {
                            Id = 27,
                            Code = "RBL",
                            CompetitionId = 1,
                            GroupId = 7,
                            Logo = "https://kassiesa.net/uefa/clubs/images/RB-Leipzig.png",
                            Name = "RB Leipzig"
                        },
                        new
                        {
                            Id = 28,
                            Code = "ASM",
                            CompetitionId = 1,
                            GroupId = 7,
                            Logo = "https://kassiesa.net/uefa/clubs/images/AS-Monaco.png",
                            Name = "AS Monaco"
                        },
                        new
                        {
                            Id = 29,
                            Code = "",
                            CompetitionId = 1,
                            GroupId = 8,
                            Logo = "https://kassiesa.net/uefa/clubs/images/APOEL-Nicosia.png",
                            Name = "APOEL"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BVB",
                            CompetitionId = 1,
                            GroupId = 8,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Borussia-Dortmund.png",
                            Name = "Borussia Dortmund"
                        },
                        new
                        {
                            Id = 31,
                            Code = "TOT",
                            CompetitionId = 1,
                            GroupId = 8,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Tottenham-Hotspur.png",
                            Name = "Tottenham Hotspur"
                        },
                        new
                        {
                            Id = 32,
                            Code = "RMD",
                            CompetitionId = 1,
                            GroupId = 8,
                            Logo = "https://kassiesa.net/uefa/clubs/images/Real-Madrid.png",
                            Name = "R. Madrid"
                        });
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.TeamStanding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("GoalsAgaints")
                        .HasColumnType("int");

                    b.Property<int>("GoalsDifference")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Loses")
                        .HasColumnType("int");

                    b.Property<int>("MatchPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoundId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStanding");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Competition", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.League", "League")
                        .WithMany("Competitions")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Season", "Season")
                        .WithMany("Competitions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Group", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.Competition", "Competition")
                        .WithMany("Groups")
                        .HasForeignKey("CompetitionId");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Match", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Group", "Group")
                        .WithMany("Matches")
                        .HasForeignKey("GroupId");

                    b.HasOne("FootballLeaguesSimulation.Models.Team", "GuestTeam")
                        .WithMany("GuestMatches")
                        .HasForeignKey("GuestTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Round", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Group");

                    b.Navigation("GuestTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Round", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.Competition", "Competition")
                        .WithMany("Rounds")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Team", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.Competition", "Competition")
                        .WithMany("Teams")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("FootballLeaguesSimulation.Models.Group", "Group")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId");

                    b.Navigation("Competition");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.TeamStanding", b =>
                {
                    b.HasOne("FootballLeaguesSimulation.Models.Competition", "Competition")
                        .WithMany("TeamStandings")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("FootballLeaguesSimulation.Models.Round", "Round")
                        .WithMany("TeamStandings")
                        .HasForeignKey("RoundId");

                    b.HasOne("FootballLeaguesSimulation.Models.Season", "Season")
                        .WithMany("TeamStandings")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballLeaguesSimulation.Models.Team", "Team")
                        .WithMany("TeamStandings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Group");

                    b.Navigation("Round");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Competition", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Matches");

                    b.Navigation("Rounds");

                    b.Navigation("Teams");

                    b.Navigation("TeamStandings");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Group", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.League", b =>
                {
                    b.Navigation("Competitions");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Round", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TeamStandings");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Season", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("TeamStandings");
                });

            modelBuilder.Entity("FootballLeaguesSimulation.Models.Team", b =>
                {
                    b.Navigation("GuestMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("TeamStandings");
                });
#pragma warning restore 612, 618
        }
    }
}
